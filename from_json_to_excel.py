import pandas as pd
import re
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON-—Ñ–∞–π–ª
with open("result.json", "r", encoding="utf-8") as f:
    data = json.load(f)

all_messages = []

unvaluable = {"saved_messages",
              "Kirimushroom_pantry",
              "‚ú®ITMO Yapping Club After-Party ‚ú®",
              "Telegram",
              }
# –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
for chat in data["chats"]["list"]:
    chat_name = chat.get("name", chat.get("type", "Unknown"))
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–∞—Ç: {chat_name}")   # üëà –≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

    if chat_name not in unvaluable:
        for msg in chat.get("messages", []):
            if msg["type"] == "message":
                all_messages.append({
                    "date": msg.get("date"),
                    "text": msg.get("text"),
                    "caption": msg.get("caption")
                })

# –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ DataFrame
messages = pd.DataFrame(all_messages)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def get_text(row):
    parts = []
    if isinstance(row["text"], list):
        for item in row["text"]:
            if isinstance(item, dict) and "text" in item:
                parts.append(item["text"])
            elif isinstance(item, str):
                parts.append(item)
    elif pd.notnull(row["text"]):
        parts.append(str(row["text"]))
    if pd.notnull(row.get("caption", None)):
        parts.append(str(row["caption"]))
    return "\n".join(parts).strip()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
messages["text"] = messages.apply(get_text, axis=1)

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
messages = messages[messages["text"] != ""]

# –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
messages["text"] = messages["text"].apply(lambda x: re.sub(r'[^\w\s.,!?-]', '', x))

# –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
messages["text"] = messages["text"].str.lower()

# –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
messages = messages[~messages["text"].str.match(r'.+\.(pdf|jpg|jpeg|png|gif|docx?|xlsx?|pptx?|txt|zip|rar)$', case=False)]

# –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏
messages = messages[~messages["text"].str.contains(r"http|www", case=False, na=False)]

# –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
result = messages[["date", "text"]]

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–∏ DataFrame –≤ Excel ---
def save_partial_excel(df, file_name="result_partial.xlsx", start=None, end=None, n_random=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Å—Ç—å DataFrame –≤ Excel.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - df: DataFrame
    - file_name: –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    - start: –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    - end: –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    - n_random: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç n —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    """
    if n_random is not None:
        df_to_save = df.sample(n=n_random, random_state=42)
    elif start is not None or end is not None:
        df_to_save = df.iloc[start:end]
    else:
        df_to_save = df  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å DataFrame, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ

    df_to_save.to_excel(file_name, index=False, engine='openpyxl')
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df_to_save)} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª {file_name}")



save_partial_excel(result, file_name="result.xlsx", start=0, end=5000)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º 50 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫
#save_partial_excel(result, file_name="result_random50.xlsx", n_random=50)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å DataFrame (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
#save_partial_excel(result, file_name="result_full.xlsx")

print("result.xlsx —Å–æ–∑–¥–∞–Ω")
